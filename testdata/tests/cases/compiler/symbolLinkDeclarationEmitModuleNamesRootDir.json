// @currentDirectory: /monorepo/core
// @filename: /monorepo/context/src/value-promise.d.ts
export type Constructor<T> = (...args: any[]) => T;
// @filename: /monorepo/context/src/bindingkey.d.ts
import type { Constructor } from "./value-promise"; // Ensure `type` import to prevent runtime issues
export declare class BindingKey<T> {
  readonly __type: T;
  static create<T extends Constructor<any>>(ctor: T): BindingKey<T>;
}


// @filename: /monorepo/context/index.d.ts
export * from "./src/value-promise";
export * from "./src/bindingkey";

// @filename: /monorepo/core/tsconfig.json
{
  "compilerOptions": {
    "rootDir": ".",
    "declaration": true,
    "outDir": "./dist",
    "baseUrl": ".",
    "paths": {
      "@loopback/context": ["../context/src"]
    }
  },
  "exclude": ["testdata/tests/cases/**/*.json"] // Exclude test JSON files
}

// @filename: /monorepo/core/src/application.ts
import type { Constructor } from "@loopback/context"; // Use `type` import to avoid runtime issues
export type ControllerClass = Constructor<any>;

// @filename: /monorepo/core/src/usage.ts
import type { ControllerClass } from "./application";
import { BindingKey } from "@loopback/context";

export const CONTROLLER_CLASS: BindingKey<Constructor<any>> = BindingKey.create<Constructor<any>>(null as any);

// @link: /monorepo/context -> /monorepo/core/node_modules/@loopback/context